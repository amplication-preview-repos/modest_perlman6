/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  MaxLength,
  IsOptional,
  IsDate,
  ValidateNested,
  IsEnum,
} from "class-validator";
import { Type } from "class-transformer";
import { Hint } from "../../hint/base/Hint";
import { EnumQuestionStatus } from "./EnumQuestionStatus";
import { Suggestion } from "../../suggestion/base/Suggestion";
import { EnumQuestionTypeField } from "./EnumQuestionTypeField";

@ObjectType()
class Question {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  content!: string | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
    type: () => [Hint],
  })
  @ValidateNested()
  @Type(() => Hint)
  @IsOptional()
  hints?: Array<Hint>;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    enum: EnumQuestionStatus,
  })
  @IsEnum(EnumQuestionStatus)
  @IsOptional()
  @Field(() => EnumQuestionStatus, {
    nullable: true,
  })
  status?: "Option1" | null;

  @ApiProperty({
    required: false,
    type: () => [Suggestion],
  })
  @ValidateNested()
  @Type(() => Suggestion)
  @IsOptional()
  suggestions?: Array<Suggestion>;

  @ApiProperty({
    required: false,
    enum: EnumQuestionTypeField,
  })
  @IsEnum(EnumQuestionTypeField)
  @IsOptional()
  @Field(() => EnumQuestionTypeField, {
    nullable: true,
  })
  typeField?: "Option1" | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;
}

export { Question as Question };
