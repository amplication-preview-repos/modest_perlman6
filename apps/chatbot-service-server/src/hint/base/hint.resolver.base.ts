/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Hint } from "./Hint";
import { HintCountArgs } from "./HintCountArgs";
import { HintFindManyArgs } from "./HintFindManyArgs";
import { HintFindUniqueArgs } from "./HintFindUniqueArgs";
import { CreateHintArgs } from "./CreateHintArgs";
import { UpdateHintArgs } from "./UpdateHintArgs";
import { DeleteHintArgs } from "./DeleteHintArgs";
import { Question } from "../../question/base/Question";
import { HintService } from "../hint.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Hint)
export class HintResolverBase {
  constructor(
    protected readonly service: HintService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Hint",
    action: "read",
    possession: "any",
  })
  async _hintsMeta(
    @graphql.Args() args: HintCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Hint])
  @nestAccessControl.UseRoles({
    resource: "Hint",
    action: "read",
    possession: "any",
  })
  async hints(@graphql.Args() args: HintFindManyArgs): Promise<Hint[]> {
    return this.service.hints(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Hint, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Hint",
    action: "read",
    possession: "own",
  })
  async hint(@graphql.Args() args: HintFindUniqueArgs): Promise<Hint | null> {
    const result = await this.service.hint(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Hint)
  @nestAccessControl.UseRoles({
    resource: "Hint",
    action: "create",
    possession: "any",
  })
  async createHint(@graphql.Args() args: CreateHintArgs): Promise<Hint> {
    return await this.service.createHint({
      ...args,
      data: {
        ...args.data,

        question: args.data.question
          ? {
              connect: args.data.question,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Hint)
  @nestAccessControl.UseRoles({
    resource: "Hint",
    action: "update",
    possession: "any",
  })
  async updateHint(@graphql.Args() args: UpdateHintArgs): Promise<Hint | null> {
    try {
      return await this.service.updateHint({
        ...args,
        data: {
          ...args.data,

          question: args.data.question
            ? {
                connect: args.data.question,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Hint)
  @nestAccessControl.UseRoles({
    resource: "Hint",
    action: "delete",
    possession: "any",
  })
  async deleteHint(@graphql.Args() args: DeleteHintArgs): Promise<Hint | null> {
    try {
      return await this.service.deleteHint(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Question, {
    nullable: true,
    name: "question",
  })
  @nestAccessControl.UseRoles({
    resource: "Question",
    action: "read",
    possession: "any",
  })
  async getQuestion(@graphql.Parent() parent: Hint): Promise<Question | null> {
    const result = await this.service.getQuestion(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.Query(() => [HintFindManyArgs])
  async GetHintsForQuestion(
    @graphql.Args("args")
    args: string
  ): Promise<HintFindManyArgs[]> {
    return this.service.GetHintsForQuestion(args);
  }
}
