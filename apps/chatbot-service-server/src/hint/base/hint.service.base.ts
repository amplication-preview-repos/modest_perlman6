/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Hint as PrismaHint,
  Question as PrismaQuestion,
} from "@prisma/client";
import { HintFindManyArgs } from "./HintFindManyArgs";

export class HintServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.HintCountArgs, "select">): Promise<number> {
    return this.prisma.hint.count(args);
  }

  async hints(args: Prisma.HintFindManyArgs): Promise<PrismaHint[]> {
    return this.prisma.hint.findMany(args);
  }
  async hint(args: Prisma.HintFindUniqueArgs): Promise<PrismaHint | null> {
    return this.prisma.hint.findUnique(args);
  }
  async createHint(args: Prisma.HintCreateArgs): Promise<PrismaHint> {
    return this.prisma.hint.create(args);
  }
  async updateHint(args: Prisma.HintUpdateArgs): Promise<PrismaHint> {
    return this.prisma.hint.update(args);
  }
  async deleteHint(args: Prisma.HintDeleteArgs): Promise<PrismaHint> {
    return this.prisma.hint.delete(args);
  }

  async getQuestion(parentId: string): Promise<PrismaQuestion | null> {
    return this.prisma.hint
      .findUnique({
        where: { id: parentId },
      })
      .question();
  }
  async GetHintsForQuestion(args: string): Promise<HintFindManyArgs[]> {
    throw new Error("Not implemented");
  }
}
